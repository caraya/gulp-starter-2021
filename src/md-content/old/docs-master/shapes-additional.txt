Shapes from the Box Model (from <http://www.sitepoint.com/css-shapes-breaking-rectangular-design/>)

Another choice for defining your float area is to use the element’s built in box model. For simple rounded corners, you can also get the rounded corner effect by using box models for your float area too.

You can use the various box model areas as your float area. I’ve added an image below to remind you of the various parts of the box model in CSS:

Box model example

The blue area is the margin-box. This is made up of the margin of the element and is outside the element’s boundary.
The black area is the border-box. In the case of the example above, we’ve got a border of 2px.
The orange area is the padding-box. This is the area that surrounds your content (e.g. our image).
The image itself is in the content-box. This is the box area that holds our image.
You can use these boundary areas as the float area like so:


shape-outside: margin-box;
shape-outside: border-box;
shape-outside: padding-box;
shape-outside: content-box;

Basically, whichever you define will be where the text will wrap to. If you define the shape-outside as margin-box, then the text will wrap up to the edge of your margin (e.g. the blue area in the example above). If you define it as border-box, it will wrap to the edge of your border, and so on.

One of the simple uses of this is to give your image float area rounded corners (just like we did with inset but a bit simpler to implement and maintain). This CSS will add a 5px gap between our image and the text, while also wrapping the text around the image with a 150px border-radius value:

border-radius: 150px;
margin: 5px;
shape-outside: margin-box;
Which looks like this:

Example of using margin-box and border-radius

And on CodePen:


The same effect with the border-radius can be done with border-box, padding-box, and content-box — it just changes how close the text gets to the image.

The shape-margin Property

You also have the option to add space around your defined CSS Shape’s float area to ensure that the text doesn’t run into the edge of your images. This is handy in cases where you’re not using the box model values for your shape.

The spec says you can use either a length (e.g. px, em. rem, etc.), percentages, or a calc() function value. Only Chrome Canary currently supports percentages, but Chrome stable supports lengths and calc() functions (as long as those calc() functions do not include a percentage). A few examples include:


shape-margin: 10px;
shape-margin: 1em;
shape-margin: 5%;
shape-margin: calc(2em - 1px);
Combine a Few Ideas and Explore!

Don’t be fooled by the ye olde illustrations in my examples — the spec can be used for more modern looking designs with photos and such too:

Polygon in colour

See it on CodePen (this demo is too awkward for an embed).

Soon enough the web will be buzzing with all sorts of shapes! Designers shall rejoice and developers shall breathe a sigh of relief that finally they can do things their print friends have been doing for years.

Please do get involved, experiment, and share your findings to help develop the spec into something we can use confidently and happily in the future. You can provide feedback to the W3C here, or get in touch with the Adobe Web Platform team.
